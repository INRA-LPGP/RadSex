/*
* Copyright (C) 2020 Romain Feron
* This file is part of RADSex.

* RADSex is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.

* RADSex is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.

* You should have received a copy of the GNU General Public License
* along with RADSex.  If not, see <https://www.gnu.org/licenses/>.
*/

#include "distrib.h"

void distrib(Parameters& parameters) {

    /* The sex_distribution function parses through a file generated by process_reads and checks for each sequence
     * the number of males and females in which the sequence was found. The output is a table with five columns:
     * Number of males | Number of females | Number of sequences | P-value | Significant
     *     <int>       |       <int>       |       <int>         | <float> |   <bool>
     */

    std::chrono::steady_clock::time_point t_begin = std::chrono::steady_clock::now();

    Popmap popmap = load_popmap(parameters);

    log("RADSex distrib started");
    log("Comparing groups \"" + parameters.group1 + "\" and \"" + parameters.group2 + "\"");

    Header header = get_header(parameters.markers_table_path);

    sd_table results;

    bool parsing_ended = false;
    MarkersQueue markers_queue;
    std::mutex queue_mutex;
    uint64_t n_markers;

    std::thread parsing_thread(table_parser, std::ref(parameters), std::ref(popmap), std::ref(markers_queue), std::ref(queue_mutex), std::ref(parsing_ended), true, false);
    std::thread processing_thread(processor, std::ref(markers_queue), std::ref(parameters), std::ref(queue_mutex), std::ref(results), std::ref(n_markers), std::ref(parsing_ended), BATCH_SIZE);

    parsing_thread.join();
    processing_thread.join();

    // Calculate p-values for association with sex for each combination of males and females
    double chi_squared = 0;

    // Compute p-values
    for (uint g = 0; g <= popmap.counts[parameters.group1]; ++g) {

        for (uint h = 0; h <= popmap.counts[parameters.group2]; ++h) {

            if (g + h != 0) {

                chi_squared = get_chi_squared(g, h, popmap.counts[parameters.group1], popmap.counts[parameters.group2]);
                results[g][h].second = std::min(1.0, get_chi_squared_p(chi_squared)); // p-value corrected with Bonferroni, with max of 1

            }
        }
    }

    // Generate the output file
    std::ofstream output_file(parameters.output_file_path);

    // Output file header
    output_file << parameters.group1 << "\t" << parameters.group2 << "\t" << "Markers" << "\t" << "P" << "\t" << "Signif" << "\t" << "Bias" << "\n";

    if (not parameters.disable_correction) parameters.signif_threshold /= n_markers; // Bonferroni correction: divide threshold by number of tests

    // Generate output file
    for (uint g = 0; g <= popmap.counts[parameters.group1]; ++g) {

        for (uint h = 0; h <= popmap.counts[parameters.group2]; ++h) {

            if (g + h != 0) {

                output_file << g << "\t" << h << "\t" << results[g][h].first << "\t" << results[g][h].second << "\t"
                            << (static_cast<float>(results[g][h].second) < parameters.signif_threshold ? "True" : "False") << "\t"
                            << static_cast<float>(g) / static_cast<float>(popmap.counts[parameters.group1]) - (static_cast<float>(h) / static_cast<float>(popmap.counts[parameters.group2])) << "\n";

            }
        }
    }

    log("RADSex distrib ended (total runtime: " + get_runtime(t_begin) + ")");
}


void processor(MarkersQueue& markers_queue, Parameters& parameters, std::mutex& queue_mutex, sd_table& results, uint64_t& n_markers, bool& parsing_ended, ulong batch_size) {

    // Give 100ms headstart to table parser thread (to get number of individuals from header)
    std::this_thread::sleep_for(std::chrono::milliseconds(100));

    std::vector<Marker> batch;
    bool keep_going = true;

    uint marker_processed_tick = static_cast<uint>(markers_queue.n_markers / 100);
    uint64_t n_processed_markers = 0;

    while (keep_going) {

        // Get a batch of markers from the queue
        batch = get_batch(markers_queue, queue_mutex, batch_size);

        if (batch.size() > 0) {  // Batch not empty

            for (auto marker: batch) {

                if (marker.n_individuals > 0) {

                    ++results[marker.groups[parameters.group1]][marker.groups[parameters.group2]].first;
                    ++n_markers;

                }

                log_progress_bar(n_processed_markers, marker_processed_tick);

            }

        } else {

            std::this_thread::sleep_for(std::chrono::milliseconds(10));  // Batch empty: wait 10ms before asking for another batch

        }

        if (parsing_ended and markers_queue.markers.size() == 0) keep_going = false;
    }
}

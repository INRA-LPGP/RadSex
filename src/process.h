/*
* Copyright (C) 2020 Romain Feron
* This file is part of RADSex.

* RADSex is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.

* RADSex is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.

* You should have received a copy of the GNU General Public License
* along with RADSex.  If not, see <https://www.gnu.org/licenses/>.
*/

/*!
 * @file process.h
 * @brief Defines function for the "process" command generating a markers depth table from individual reads files .
*/

#pragma once
#include <dirent.h>
#include <iostream>
#include <mutex>
#include <string>
#include <thread>
#include <unordered_map>
#include <zlib.h>
#include "kseq/kseq.h"
#include "parameters.h"
#include "utils.h"


const std::vector<std::string> extensions {".fq.gz", ".fq", ".fastq.gz", ".fastq", ".fasta.gz", ".fasta", ".fa.gz", ".fa", ".fna.gz", ".fna"};   ///< List of extensions for currently supported file types


/*!
 * \brief InputFile struct
 *
 * Store information about an input reads file.
 */

struct InputFile {

    std::string individual_name;   ///< Name of the individual, inferred from the file name
    std::string path;   ///< File path
    std::string extension;   ///< File extension (supported extensions are defined in \link extensions \endlink
    bool processed = false;   ///< If true, the file has already been processed

};


/*!
 * \brief Get input files
 *
 * Detect all input files in the input directory based on extensions and store file information in a InputFile vector.
 *
 * \param input_dir_path Path to the input directory
 *
 * \return A vector of InputFile objects, each containing information about an input file
 */

std::vector<InputFile> get_input_files(const std::string& input_dir_path);


/*!
 * \brief Main function implementing the "process" command
 *
 * Generate a markers depth table from all individual reads files detected in an input directory.
 * The function spans multiple file_processor() threads to process input files in parallel.
 *
 * \param parameters A Parameters object storing the value of all RADSex parameters
 */

void process(Parameters& parameters);


/*!
 * \brief File processor
 *
 * Look for an unprocessed input file in the vector of input files generated by get_input_files() and process this file.
 *
 * \param input_files   Vector of InputFile generated by get_input_files()
 * \param results       A map of marker depth for each individual: {Marker -> {Individual -> depth}}
 * \param results_mutex A mutex protecting the marker depth map when writing from process_file()
 * \param files_mutex   A mutex to lock the InputFile vector while looking for a file to process
 */

void file_processor(std::vector<InputFile>& input_files, std::unordered_map<std::string, std::unordered_map<std::string, uint16_t>>& results, std::mutex& results_mutex, std::mutex& files_mutex);


/*!
 * \brief Process a single file
 *
 * Read all sequences from an input file with kseq_read() and increment the marker depth table accordingly.
 *
 * \param input_file    Path to the reads file
 * \param results       A map of marker depth for each individual: {Marker -> {Individual -> depth}}
 * \param results_mutex A mutex protecting the marker depth map when writing from multiple processing threads
 */

inline void process_file(InputFile& input_file, std::unordered_map<std::string, std::unordered_map<std::string, uint16_t>>& results, std::mutex& results_mutex);

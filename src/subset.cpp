#include "subset.h"


void subset(Parameters& parameters) {

    /* The subset function parses through a file generated by process_reads and outputs sequences with the following criteria:
     * - Found in M group1 with min_group1 <= M <= max_group1
     * - Found in F group2 with min_group2 <= F <= max_group2
     */

    Popmap popmap = load_popmap(parameters);
    std::string group1 = parameters.group1;
    std::string group2 = parameters.group2;

    if (parameters.set_max_group1) parameters.subset_max_group1 = popmap.counts[group1];
    if (parameters.set_max_group2) parameters.subset_max_group2 = popmap.counts[group2];
    if (parameters.set_max_individuals) parameters.subset_max_individuals= popmap.counts[group1] + popmap.counts[group2];

    std::ifstream input_file;
    input_file.open(parameters.markers_table_path);

    if (input_file) {

        std::ofstream output_file;
        output_file.open(parameters.output_file_path);

        std::vector<std::string> line;
        std::string temp = "";

        // First line is a comment with number of markers in the table
        std::getline(input_file, temp);
        line = split(temp, " : ");
        if (line.size() == 2) uint n_markers = static_cast<uint>(std::stoi(line[1]));

        // Second line is the header. The header is parsed to get the sex of each field in the table.
        std::getline(input_file, temp);
        line = split(temp, "\t");
        if (not parameters.output_fasta) output_file << "#Number of markers: NA\n" <<  temp << "\n"; // Copy the header line to the output file

        // Vector of group for each individual (by column index)
        std::vector<std::string> sex_columns = get_column_sex(popmap.groups, line);

        // Define variables used to read the file
        char buffer[65536];
        std::string temp_line;
        uint k = 0, field_n = 0;
        uint n_individuals = 0;
        std::unordered_map<std::string, uint> sex_count;

        do {

            // Read a chunk of size given by the buffer
            input_file.read(buffer, sizeof(buffer));
            k = static_cast<uint>(input_file.gcount());

            for (uint i=0; i<k; ++i) {

                // Read the buffer character by character
                switch(buffer[i]) {

                    case '\t':  // New field
                        if (field_n > 2 and static_cast<uint>(std::stoi(temp)) >= parameters.min_depth) ++sex_count[sex_columns[field_n]];  // Increment the appropriate counter
                        temp = "";
                        temp_line += buffer[i];
                        ++field_n;
                        break;

                    case '\n':  // New line (also a new field)
                        if (field_n > 2 and static_cast<uint>(std::stoi(temp)) >= parameters.min_depth) ++sex_count[sex_columns[field_n]];  // Increment the appropriate counter
                        for (auto group: sex_count) n_individuals += group.second;
                        if (sex_count[group1] >= parameters.subset_min_group1 and sex_count[group1] <= parameters.subset_max_group1 and
                            sex_count[group2] >= parameters.subset_min_group2 and sex_count[group1] <= parameters.subset_max_group2 and
                            n_individuals >= parameters.subset_min_individuals and n_individuals <= parameters.subset_max_individuals) {
                            if (parameters.output_fasta) {
                                line = split(temp_line, "\t");
                                output_file << ">" << line[0] << "_" << group1 << ":" << sex_count[group1] << "_" << group2 << ":" << sex_count[group2] << "_mindepth:" << parameters.min_depth << "\n" << line[1] << "\n";
                            } else {
                                output_file << temp_line << "\n";
                            }
                        }
                        // Reset variables
                        temp = "";
                        temp_line = "";
                        field_n = 0;
                        for (auto& group: sex_count) group.second = 0;
                        n_individuals = 0;
                        break;

                    default:
                        temp += buffer[i];
                        temp_line += buffer[i];
                        break;
                }
            }

        } while (input_file);

        output_file.close();
        input_file.close();
    }
}
